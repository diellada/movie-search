!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";t.r(n);var r=function(e,n,t,r){return new(t||(t=Promise))((function(o,a){function c(e){try{i(r.next(e))}catch(e){a(e)}}function u(e){try{i(r.throw(e))}catch(e){a(e)}}function i(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(c,u)}i((r=r.apply(e,n||[])).next())}))},o=function(e,n){var t,r,o,a,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;c;)try{if(t=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return c.label++,{value:a[1],done:!1};case 5:c.label++,r=a[1],a=[0];continue;case 7:a=c.ops.pop(),c.trys.pop();continue;default:if(!(o=(o=c.trys).length>0&&o[o.length-1])&&(6===a[0]||2===a[0])){c=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){c.label=a[1];break}if(6===a[0]&&c.label<o[1]){c.label=o[1],o=a;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(a);break}o[2]&&c.ops.pop(),c.trys.pop();continue}a=n.call(e,c)}catch(e){a=[6,e],r=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},a=function(e,n,t){!function(e,n){var t=document.getElementById("dropdown-list");t.onchange=function(){var r=t.options[t.selectedIndex].value;console.log(r),a(e,n,r)}}(e,n);var r,o,c=document.getElementById("movie-container");r=c,(o=new Range).selectNodeContents(r),o.deleteContents(),(t?function(e,n){return e.filter((function(e){return Number(e.Year)===Number(n)}))}(e,t):e).forEach((function(e){n.push(e.Year);var t=document.createElement("div");t.classList.add("card");var r=document.createElement("p");t.append(r),c.append(t),t.style.backgroundImage="url("+e.Poster+")",r.innerHTML=e.Title+" ("+e.Year+")"}))};document.getElementById("search-button").addEventListener("click",(function(){var e,n=document.getElementById("search-bar"),t=[];(e=n.value,r(void 0,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return[4,fetch("http://www.omdbapi.com/?s="+e+"&apikey=152b30dd")];case 1:return[4,n.sent().json()];case 2:return[2,n.sent()]}}))}))).then((function(e){var n=e.Search;a(n,t,void 0),function(e){e.sort((function(e,n){return e-n}));var n=document.getElementById("dropdown-list");n.style.display="block",e.forEach((function(e){var t=document.createElement("option");t.classList.add("year-element"),n.append(t),t.innerText=e}))}(t)})).catch((function(e){console.log(e),document.getElementById("movie-container").innerText="Please enter a valid search parameter"}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL29tZGIvb21kYi50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImJ1aWxkTGlzdCIsIm1vdmllcyIsInllYXJBcnJheSIsInllYXJTZWxlY3RlZCIsInllYXJEcm9wZG93biIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJvbmNoYW5nZSIsInNlbGVjdGVkWWVhciIsIm9wdGlvbnMiLCJzZWxlY3RlZEluZGV4IiwiY29uc29sZSIsImxvZyIsImRyb3BEb3duTGlzdGVuZXIiLCJjYXJkQ29udHMiLCJyYW5nZU9iaiIsImNhcmRDb250YWluZXIiLCJSYW5nZSIsInNlbGVjdE5vZGVDb250ZW50cyIsImRlbGV0ZUNvbnRlbnRzIiwieWVhciIsImZpbHRlciIsIm1vdmllIiwiTnVtYmVyIiwiWWVhciIsImZpbHRlck1vdmllcyIsImZvckVhY2giLCJwdXNoIiwiY2FyZCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJwYXJhZ3JhcGgiLCJhcHBlbmQiLCJzdHlsZSIsImJhY2tncm91bmRJbWFnZSIsIlBvc3RlciIsImlubmVySFRNTCIsIlRpdGxlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNlYXJjaFZhbCIsInNlYXJjaEJhciIsImZldGNoIiwianNvbiIsInRoZW4iLCJkYXRhIiwibW92aWVBcnJheSIsIlNlYXJjaCIsInNvcnQiLCJhIiwiYiIsImRpc3BsYXkiLCJsaXN0RWxlbWVudCIsImlubmVyVGV4dCIsImJ1aWxkRHJvcGRvd24iLCJjYXRjaCIsImVycm9yIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9Z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bGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiaW1wb3J0IHsgZ2V0TW92aWVzIH0gZnJvbSAnLi9vbWRiL29tZGInO1xyXG5cclxuLy8gbGV0IHllYXJBcnJheSA9IFtdO1xyXG5cclxuY29uc3QgdXBkYXRlTW92aWVzID0gKGNhcmRDb250czogSFRNTEVsZW1lbnQpID0+IHtcclxuICBsZXQgcmFuZ2VPYmogPSBuZXcgUmFuZ2UoKTtcclxuICByYW5nZU9iai5zZWxlY3ROb2RlQ29udGVudHMoY2FyZENvbnRzKTtcclxuICByYW5nZU9iai5kZWxldGVDb250ZW50cygpO1xyXG4gIHJldHVybiBjYXJkQ29udHM7XHJcbn1cclxuXHJcbmNvbnN0IGZpbHRlck1vdmllcyA9IChtb3ZpZXMsIHllYXIpID0+IHtcclxuICBsZXQgZmlsdGVyZWRNb3ZpZXMgPSBtb3ZpZXMuZmlsdGVyKG1vdmllID0+IHtcclxuICAgIHJldHVybiBOdW1iZXIobW92aWUuWWVhcikgPT09IE51bWJlcih5ZWFyKTtcclxuICB9KVxyXG4gIHJldHVybiBmaWx0ZXJlZE1vdmllcztcclxufVxyXG5cclxuY29uc3QgZHJvcERvd25MaXN0ZW5lciA9IChtb3ZpZXMsIHllYXJBcnJheSkgPT4ge1xyXG4gIGNvbnN0IHllYXJEcm9wZG93biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHJvcGRvd24tbGlzdFwiKTsgIFxyXG4gIHllYXJEcm9wZG93bi5vbmNoYW5nZSA9ICgpID0+IHtcclxuICAgIGNvbnN0IHNlbGVjdGVkWWVhciA9ICg8SFRNTFNlbGVjdEVsZW1lbnQ+eWVhckRyb3Bkb3duKS5vcHRpb25zWyg8SFRNTFNlbGVjdEVsZW1lbnQ+eWVhckRyb3Bkb3duKS5zZWxlY3RlZEluZGV4XS52YWx1ZTtcclxuICAgIGNvbnNvbGUubG9nKHNlbGVjdGVkWWVhcik7XHJcbiAgICBidWlsZExpc3QobW92aWVzLCB5ZWFyQXJyYXksIHNlbGVjdGVkWWVhcik7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBidWlsZERyb3Bkb3duID0gKHllYXJBcnJheSkgPT4ge1xyXG4gIHllYXJBcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpe3JldHVybiBhLWJ9KTtcclxuICBjb25zdCB5ZWFyRHJvcGRvd24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRyb3Bkb3duLWxpc3RcIik7XHJcbiAgeWVhckRyb3Bkb3duLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgeWVhckFycmF5LmZvckVhY2goeWVhciA9PiB7XHJcbiAgICBsZXQgbGlzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xyXG4gICAgbGlzdEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInllYXItZWxlbWVudFwiKTtcclxuICAgIHllYXJEcm9wZG93bi5hcHBlbmQobGlzdEVsZW1lbnQpO1xyXG4gICAgbGlzdEVsZW1lbnQuaW5uZXJUZXh0ID0geWVhcjtcclxuICB9KVxyXG59XHJcblxyXG5jb25zdCBidWlsZExpc3QgPSAobW92aWVzLCB5ZWFyQXJyYXksIHllYXJTZWxlY3RlZCkgPT4ge1xyXG4gIGRyb3BEb3duTGlzdGVuZXIobW92aWVzLCB5ZWFyQXJyYXkpO1xyXG5cclxuICBjb25zdCBjYXJkQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb3ZpZS1jb250YWluZXJcIik7XHJcbiAgdXBkYXRlTW92aWVzKGNhcmRDb250YWluZXIpO1xyXG5cclxuICBsZXQgZmlsdGVyZWRNb3ZpZXMgPSB5ZWFyU2VsZWN0ZWQgPyAgZmlsdGVyTW92aWVzKG1vdmllcywgeWVhclNlbGVjdGVkKSA6IG1vdmllcztcclxuICBmaWx0ZXJlZE1vdmllcy5mb3JFYWNoKChtb3ZpZSkgPT4ge1xyXG4gICAgeWVhckFycmF5LnB1c2gobW92aWUuWWVhcik7XHJcblxyXG4gICAgbGV0IGNhcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgY2FyZC5jbGFzc0xpc3QuYWRkKFwiY2FyZFwiKTtcclxuICAgIGxldCBwYXJhZ3JhcGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgIGNhcmQuYXBwZW5kKHBhcmFncmFwaCk7XHJcbiAgICBjYXJkQ29udGFpbmVyLmFwcGVuZChjYXJkKTtcclxuICAgIGNhcmQuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgke21vdmllLlBvc3Rlcn0pYDtcclxuICAgIHBhcmFncmFwaC5pbm5lckhUTUwgPSBgJHttb3ZpZS5UaXRsZX0gKCR7bW92aWUuWWVhcn0pYDtcclxuICB9KTtcclxufVxyXG5cclxuXHJcbmNvbnN0IHNlYXJjaE1vdmllcyA9ICgpID0+IHtcclxuICBjb25zdCBzZWFyY2hCYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlYXJjaC1iYXJcIikgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICBsZXQgeWVhckFycmF5ID0gW107XHJcbiAgbGV0IHllYXJTZWxlY3RlZDtcclxuXHJcbiAgZ2V0TW92aWVzKHNlYXJjaEJhci52YWx1ZSkudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgbGV0IG1vdmllQXJyYXk6IHN0cmluZ1tdID0gZGF0YS5TZWFyY2g7XHJcbiAgICBidWlsZExpc3QobW92aWVBcnJheSwgeWVhckFycmF5LCB5ZWFyU2VsZWN0ZWQpO1xyXG4gICAgYnVpbGREcm9wZG93bih5ZWFyQXJyYXkpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgY29uc3QgY2FyZENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW92aWUtY29udGFpbmVyXCIpO1xyXG4gICAgY2FyZENvbnRhaW5lci5pbm5lclRleHQgPSBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIHNlYXJjaCBwYXJhbWV0ZXJcIjtcclxuICB9KTtcclxufVxyXG5cclxuY29uc3Qgc2VhcmNoQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWFyY2gtYnV0dG9uXCIpO1xyXG5zZWFyY2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHNlYXJjaE1vdmllcyk7XHJcblxyXG5cclxuLy8gY29uc3QgZ2V0WWVhckZpbHRlcmVkID0gKCkgPT4ge1xyXG5cclxuLy8gfVxyXG5cclxuLy8gbGV0IGxpc3RZZWFycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaXN0LWVsZW1lbnRcIik7XHJcblxyXG4vLyBmb3IgKGNvbnN0IHllYXIgb2YgbGlzdFllYXJzKSB7XHJcbi8vICAgeWVhci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZ2V0WWVhckZpbHRlcmVkKTtcclxuLy8gfVxyXG5cclxuIiwiLy8gaHR0cDovL3d3dy5vbWRiYXBpLmNvbS8/aT10dDM4OTYxOTgmYXBpa2V5PTE1MmIzMGRkXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGdldE1vdmllcyA9IGFzeW5jIChzZWFyY2hWYWw6c3RyaW5nKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICBsZXQgdXJsID0gYGh0dHA6Ly93d3cub21kYmFwaS5jb20vP3M9JHtzZWFyY2hWYWx9JmFwaWtleT0xNTJiMzBkZGA7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xyXG4gIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9
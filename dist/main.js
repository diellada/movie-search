!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function c(e){try{i(r.next(e))}catch(e){a(e)}}function u(e){try{i(r.throw(e))}catch(e){a(e)}}function i(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,u)}i((r=r.apply(e,t||[])).next())}))},o=function(e,t){var n,r,o,a,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;c;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return c.label++,{value:a[1],done:!1};case 5:c.label++,r=a[1],a=[0];continue;case 7:a=c.ops.pop(),c.trys.pop();continue;default:if(!(o=(o=c.trys).length>0&&o[o.length-1])&&(6===a[0]||2===a[0])){c=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){c.label=a[1];break}if(6===a[0]&&c.label<o[1]){c.label=o[1],o=a;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(a);break}o[2]&&c.ops.pop(),c.trys.pop();continue}a=t.call(e,c)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},a=[],c=function(){a.sort((function(e,t){return e-t})),console.log(a);var e=document.getElementById("dropdown-list");e.style.display="block",a.forEach((function(t){var n=document.createElement("li");n.classList.add("year-element"),e.append(n),n.innerText=t}))},u=function(e){var t,n,r=document.getElementById("movie-container");t=r,(n=new Range).selectNodeContents(t),n.deleteContents(),e.forEach((function(e){a.push(e.Year);var t=document.createElement("div");t.classList.add("card");var n=document.createElement("p");t.append(n),r.append(t),t.style.backgroundImage="url("+e.Poster+")",n.innerHTML=e.Title+" ("+e.Year+")"}))};document.getElementById("search-button").addEventListener("click",(function(){var e,t=document.getElementById("search-bar");(e=t.value,r(void 0,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,fetch("http://www.omdbapi.com/?s="+e+"&apikey=152b30dd")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))).then((function(e){var t=e.Search;u(t),c()})).catch((function(e){console.log(e),document.getElementById("movie-container").innerText="Please enter a valid search parameter"}))})),document.getElementById("filter-button").addEventListener("click",c)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL29tZGIvb21kYi50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInllYXJBcnJheSIsImJ1aWxkRHJvcGRvd24iLCJzb3J0IiwiYSIsImIiLCJjb25zb2xlIiwibG9nIiwieWVhckRyb3Bkb3duIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwiZGlzcGxheSIsImZvckVhY2giLCJ5ZWFyIiwibGlzdEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kIiwiaW5uZXJUZXh0IiwiYnVpbGRMaXN0IiwibW92aWVzIiwiY2FyZENvbnRzIiwicmFuZ2VPYmoiLCJjYXJkQ29udGFpbmVyIiwiUmFuZ2UiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJkZWxldGVDb250ZW50cyIsIm1vdmllIiwicHVzaCIsIlllYXIiLCJjYXJkIiwicGFyYWdyYXBoIiwiYmFja2dyb3VuZEltYWdlIiwiUG9zdGVyIiwiaW5uZXJIVE1MIiwiVGl0bGUiLCJhZGRFdmVudExpc3RlbmVyIiwic2VhcmNoVmFsIiwic2VhcmNoQmFyIiwiZmV0Y2gi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dkNnQixFQUFLYixPQUFPYyxHQUNaUixFQUFjTixPQUFPYSxHQUNyQkEsRUFBS3JCLE1BQU11QixnQkFBa0IsT0FBT0wsRUFBTU0sT0FBTSxJQUNoREYsRUFBVUcsVUFBZVAsRUFBTVEsTUFBSyxLQUFLUixFQUFNRSxLQUFJLFFBb0JsQ3RCLFNBQVNDLGVBQWUsaUJBQ2hDNEIsaUJBQWlCLFNBaEJULFdBQ25CLElDM0Q4QkMsRUQyRHhCQyxFQUFZL0IsU0FBU0MsZUFBZSxlQzNEWjZCLEVENkRwQkMsRUFBVXRELE1DN0QwQixtQyxrREFFN0IsU0FBTXVELE1BRGIsNkJBQTZCRixFQUFTLHFCLE9BRXpDLFNBRFUsU0FDS0csUSxPQUF0QixNQUFPLENBQVAsRUFBTyxrQkQwRG9CQyxNQUFLLFNBQUNDLEdBQy9CLElBQUlDLEVBQXVCRCxFQUFLRSxPQUNoQ3pCLEVBQVV3QixHQUNWM0MsT0FFRDZDLE9BQU0sU0FBQ0MsR0FDTjFDLFFBQVFDLElBQUl5QyxHQUNVdkMsU0FBU0MsZUFBZSxtQkFDaENVLFVBQVksOENBT1RYLFNBQVNDLGVBQWUsaUJBQ2hDNEIsaUJBQWlCLFFBQVNwQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiaW1wb3J0IHsgZ2V0TW92aWVzIH0gZnJvbSAnLi9vbWRiL29tZGInO1xyXG5cclxubGV0IHllYXJBcnJheSA9IFtdO1xyXG5cclxuXHJcblxyXG5jb25zdCB1cGRhdGVNb3ZpZXMgPSAoY2FyZENvbnRzOiBIVE1MRWxlbWVudCkgPT4ge1xyXG4gIGxldCByYW5nZU9iaiA9IG5ldyBSYW5nZSgpO1xyXG4gIHJhbmdlT2JqLnNlbGVjdE5vZGVDb250ZW50cyhjYXJkQ29udHMpO1xyXG4gIHJhbmdlT2JqLmRlbGV0ZUNvbnRlbnRzKCk7XHJcbiAgcmV0dXJuIGNhcmRDb250cztcclxufVxyXG5cclxuY29uc3QgZmlsdGVyTW92aWVzID0gKG1vdmllcywgeWVhcikgPT4ge1xyXG4gIGxldCBmaWx0ZXJlZE1vdmllcyA9IG1vdmllcy5maWx0ZXIobW92aWUgPT4ge1xyXG4gICAgcmV0dXJuIE51bWJlcihtb3ZpZS5ZZWFyKSA9PT0gTnVtYmVyKHllYXIpO1xyXG4gIH0pXHJcbiAgcmV0dXJuIGZpbHRlcmVkTW92aWVzO1xyXG59XHJcblxyXG5jb25zdCBjcmVhdGVDYXJkcyA9ICgpID0+IHtcclxuICBcclxufVxyXG5cclxuY29uc3QgYnVpbGREcm9wZG93biA9ICgpID0+IHtcclxuICBcclxuICB5ZWFyQXJyYXkuc29ydChmdW5jdGlvbihhLCBiKXtyZXR1cm4gYS1ifSk7XHJcbiAgY29uc29sZS5sb2coeWVhckFycmF5KTtcclxuICBjb25zdCB5ZWFyRHJvcGRvd24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRyb3Bkb3duLWxpc3RcIik7XHJcbiAgeWVhckRyb3Bkb3duLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgeWVhckFycmF5LmZvckVhY2goeWVhciA9PiB7XHJcbiAgICBsZXQgbGlzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICBsaXN0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwieWVhci1lbGVtZW50XCIpO1xyXG4gICAgeWVhckRyb3Bkb3duLmFwcGVuZChsaXN0RWxlbWVudCk7XHJcbiAgICBsaXN0RWxlbWVudC5pbm5lclRleHQgPSB5ZWFyO1xyXG4gIH0pXHJcbiAgXHJcbn1cclxuXHJcbmNvbnN0IGJ1aWxkTGlzdCA9IChtb3ZpZXMpID0+IHtcclxuICBjb25zdCBjYXJkQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb3ZpZS1jb250YWluZXJcIik7XHJcbiAgdXBkYXRlTW92aWVzKGNhcmRDb250YWluZXIpO1xyXG4gIGxldCB5ZWFyO1xyXG4gIGxldCBmaWx0ZXJlZE1vdmllcyA9IHllYXIgPyAgZmlsdGVyTW92aWVzKG1vdmllcywgeWVhcikgOiBtb3ZpZXM7XHJcblxyXG4gIGZpbHRlcmVkTW92aWVzLmZvckVhY2goKG1vdmllKSA9PiB7XHJcbiAgICB5ZWFyQXJyYXkucHVzaChtb3ZpZS5ZZWFyKTtcclxuICAgIFxyXG5cclxuXHJcbiAgICBsZXQgY2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBjYXJkLmNsYXNzTGlzdC5hZGQoXCJjYXJkXCIpO1xyXG4gICAgbGV0IHBhcmFncmFwaCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgY2FyZC5hcHBlbmQocGFyYWdyYXBoKTtcclxuICAgIGNhcmRDb250YWluZXIuYXBwZW5kKGNhcmQpO1xyXG4gICAgY2FyZC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCR7bW92aWUuUG9zdGVyfSlgO1xyXG4gICAgcGFyYWdyYXBoLmlubmVySFRNTCA9IGAke21vdmllLlRpdGxlfSAoJHttb3ZpZS5ZZWFyfSlgO1xyXG4gIH0pO1xyXG59XHJcblxyXG5cclxuY29uc3Qgc2VhcmNoTW92aWVzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHNlYXJjaEJhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoLWJhclwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICBnZXRNb3ZpZXMoc2VhcmNoQmFyLnZhbHVlKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICBsZXQgbW92aWVBcnJheTogc3RyaW5nW10gPSBkYXRhLlNlYXJjaDtcclxuICAgIGJ1aWxkTGlzdChtb3ZpZUFycmF5KTtcclxuICAgIGJ1aWxkRHJvcGRvd24oKTtcclxuICB9KVxyXG4gIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgIGNvbnN0IGNhcmRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1vdmllLWNvbnRhaW5lclwiKTtcclxuICAgIGNhcmRDb250YWluZXIuaW5uZXJUZXh0ID0gXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBzZWFyY2ggcGFyYW1ldGVyXCI7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmNvbnN0IHNlYXJjaEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoLWJ1dHRvblwiKTtcclxuc2VhcmNoQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBzZWFyY2hNb3ZpZXMpO1xyXG5cclxuY29uc3QgZmlsdGVyQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmaWx0ZXItYnV0dG9uXCIpO1xyXG5maWx0ZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGJ1aWxkRHJvcGRvd24pO1xyXG5cclxuIiwiLy8gaHR0cDovL3d3dy5vbWRiYXBpLmNvbS8/aT10dDM4OTYxOTgmYXBpa2V5PTE1MmIzMGRkXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGdldE1vdmllcyA9IGFzeW5jIChzZWFyY2hWYWw6c3RyaW5nKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICBsZXQgdXJsID0gYGh0dHA6Ly93d3cub21kYmFwaS5jb20vP3M9JHtzZWFyY2hWYWx9JmFwaWtleT0xNTJiMzBkZGA7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xyXG4gIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9